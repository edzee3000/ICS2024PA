#***************************************************************************************
# Copyright (c) 2014-2022 Zihao Yu, Nanjing University
#
# NEMU is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#          http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
#
# See the Mulan PSL v2 for more details.
#**************************************************************************************/

# Sanity check  
# 这两行代码用于检查 NEMU_HOME 变量是否为有效的 NEMU 项目目录。具体来说，通过 wildcard 命令查找 
# $(NEMU_HOME)/src/nemu-main.c 文件是否存在，如果不存在，则通过 error 命令打印错误信息。
MAKEFLAGS+= -j 32  #在这里我修改了-j参数让多个cpu同时去跑makefile  编译速度会更快
ifeq ($(wildcard $(NEMU_HOME)/src/nemu-main.c),)
  $(error NEMU_HOME=$(NEMU_HOME) is not a NEMU repo)
endif

# Include variables and rules generated by menuconfig
# 这两行代码用于引入 menuconfig 生成的配置变量和规则。menuconfig 是一个配置工具，可以通过图形界面方便地配置项目的编译选项，并生成自动化脚本。
-include $(NEMU_HOME)/include/config/auto.conf
-include $(NEMU_HOME)/include/config/auto.conf.cmd


# 这段代码用于设置 GUEST_ISA 和 ENGINE 变量，分别基于 CONFIG_ISA 和 CONFIG_ENGINE 变量。 remove_quote 函数用于去除可能存在的引号。
# 然后，NAME 变量被设置为 GUEST_ISA 和 ENGINE 的组合，中间用短横线连接。
# 例如，如果 GUEST_ISA 设置为 x86，ENGINE 设置为 qemu，则 NAME 将设置为 x86-nemu-qemu
remove_quote = $(patsubst "%",%,$(1))

# Extract variabls from menuconfig
GUEST_ISA ?= $(call remove_quote,$(CONFIG_ISA))
ENGINE ?= $(call remove_quote,$(CONFIG_ENGINE))
NAME    = $(GUEST_ISA)-nemu-$(ENGINE)
# ?= 运算符用于为变量设置默认值。在这种情况下，如果 GUEST_ISA 和 ENGINE 变量尚未设置，它们将被设置为 CONFIG_ISA 和 CONFIG_ENGINE 变量的值，
# 而不是保留原来的值。如果 GUEST_ISA 和 ENGINE 变量已经设置，则它们的值不会更改。这使得 Makefile 可以在这些变量没有指定其他值的情况下使用默认值。
# ？= 和 += 都是 make 的变量定义运算符。
# ?= 的意思是，如果变量之前没有被定义过，就将其定义为后面的值，否则，保留之前的值。这个运算符可以用来定义默认值。
# += 的意思是将变量的值和后面的值进行拼接。这个运算符可以用来往变量添加额外的值。




# 这一段代码用于提取源文件列表。
# 首先，它会查找所有名为 filelist.mk 的文件，并将它们包含到当前文件中。filelist.mk 文件中包含了一些变量，用于指定要编译的源文件。
# 然后，它会定义一些黑名单变量，用于指定不需要编译的目录和文件。它会先找出所有在黑名单中的目录，并将所有在这些目录中的 .c 文件都加入黑名单。
# 最后，它会找出所有需要编译的目录，并从中提取所有 .c 文件，最终将它们筛送出黑名单中的文件，得到最终的源文件列表。
# 在这段代码中，筛选文件列表的过程使用了 filter-out 函数。这个函数会将第二个参数中不在第一个参数中出现过的项目返回。
# Include all filelist.mk to merge file lists
FILELIST_MK = $(shell find -L ./src -name "filelist.mk")
include $(FILELIST_MK)

# Filter out directories and files in blacklist to obtain the final set of source files
DIRS-BLACKLIST-y += $(DIRS-BLACKLIST)
SRCS-BLACKLIST-y += $(SRCS-BLACKLIST) $(shell find -L $(DIRS-BLACKLIST-y) -name "*.c")
SRCS-y += $(shell find -L $(DIRS-y) -name "*.c")
SRCS = $(filter-out $(SRCS-BLACKLIST-y),$(SRCS-y))





# 这段代码用于从菜单配置中提取编译器和选项，并设置相应的编译器变量。它首先设置 CC 变量为 CONFIG_CC 的值，
# 并使用 remove_quote 函数去除可能存在的引号。然后，它检查了菜单配置中的各种选项，并根据它们来设置 CFLAGS_BUILD 和 CFLAGS_TRACE 变量。
# 最后，它将这些变量用于设置 CFLAGS 和 LDFLAGS 变量，以便在编译时使用它们。这些变量包含了编译器和选项，用于编译程序。
# Extract compiler and options from menuconfig
ifneq ($(CONFIG_CC),)
CC = $(call remove_quote,$(CONFIG_CC))
endif
CFLAGS_BUILD += $(call remove_quote,$(CONFIG_CC_OPT))
CFLAGS_BUILD += $(if $(CONFIG_CC_LTO),-flto,)
CFLAGS_BUILD += $(if $(CONFIG_CC_DEBUG),-Og -ggdb3,)
CFLAGS_BUILD += $(if $(CONFIG_CC_ASAN),-fsanitize=address,)
CFLAGS_TRACE += -DITRACE_COND=$(if $(CONFIG_ITRACE_COND),$(call remove_quote,$(CONFIG_ITRACE_COND)),true)
CFLAGS  += $(CFLAGS_BUILD) $(CFLAGS_TRACE) -D__GUEST_ISA__=$(GUEST_ISA)
LDFLAGS += $(CFLAGS_BUILD)




# 这段代码包括了其他 Makefile 中的规则，用于构建 NEMU 程序。
# include $(NEMU_HOME)/scripts/config.mk 语句包括了 config.mk Makefile 中的规则，用于处理菜单配置选项。
# ifdef 语句检查 CONFIG_TARGET_AM 变量是否已定义。如果是，则执行 include $(AM_HOME)/Makefile 语句，
# 它包括了 AM_HOME 目录中的 Makefile 中的规则。然后将 LINKAGE 变量附加上 ARCHIVES 变量。
# 如果 CONFIG_TARGET_AM 未定义，则执行 include $(NEMU_HOME)/scripts/native.mk 语句，它包括了 native.mk Makefile 中的规则，
# 用于构建 NEMU 程序。这些规则用于编译程序并链接所有必要的对象文件，以创建最终的可执行文件。
# Include rules for menuconfig
include $(NEMU_HOME)/scripts/config.mk

ifdef CONFIG_TARGET_AM
include $(AM_HOME)/Makefile
LINKAGE += $(ARCHIVES)
else
# Include rules to build NEMU  这一行会把native.mk包含进来，而run命令就在native.mk里面
include $(NEMU_HOME)/scripts/native.mk
endif
